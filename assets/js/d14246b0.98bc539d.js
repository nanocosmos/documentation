"use strict";(self.webpackChunknanocosomos_documentation=self.webpackChunknanocosomos_documentation||[]).push([[6344],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,u=d["".concat(l,".").concat(g)]||d[g]||m[g]||r;return t?a.createElement(u,i(i({ref:n},p),{},{components:t})):a.createElement(u,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},73997:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(58168),o=(t(96540),t(15680));const r={id:"nanoplayer_feature_video_access_and_processing",title:"Video Access and Processing",sidebar_label:"Video Access and Processing"},i=void 0,s={unversionedId:"nanoplayer/nanoplayer_feature_video_access_and_processing",id:"nanoplayer/nanoplayer_feature_video_access_and_processing",title:"Video Access and Processing",description:"Video access and processing using onActiveVideoElementChange",source:"@site/docs/nanoplayer/nanoplayer_feature_video_access_and_processing.md",sourceDirName:"nanoplayer",slug:"/nanoplayer/nanoplayer_feature_video_access_and_processing",permalink:"/docs/nanoplayer/nanoplayer_feature_video_access_and_processing",draft:!1,tags:[],version:"current",lastUpdatedAt:1724102288,formattedLastUpdatedAt:"Aug 19, 2024",frontMatter:{id:"nanoplayer_feature_video_access_and_processing",title:"Video Access and Processing",sidebar_label:"Video Access and Processing"},sidebar:"H5Live Player",previous:{title:"Source defaults",permalink:"/docs/nanoplayer/nanoplayer_feature_source_defaults"},next:{title:"Latest",permalink:"/docs/nanoplayer/nanoplayer_release_latest"}},l={},c=[{value:"Video access and processing using <code>onActiveVideoElementChange</code>",id:"video-access-and-processing-using-onactivevideoelementchange",level:2},{value:"How to use <code>onActiveVideoElementChange</code> to take a snapshot",id:"how-to-use-onactivevideoelementchange-to-take-a-snapshot",level:2}],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"video-access-and-processing-using-onactivevideoelementchange"},"Video access and processing using ",(0,o.yg)("inlineCode",{parentName:"h2"},"onActiveVideoElementChange")),(0,o.yg)("p",null,"Introduced in ",(0,o.yg)("strong",{parentName:"p"},"nanoStream H5Live Player Version 4.17.0"),", the new ",(0,o.yg)("inlineCode",{parentName:"p"},"onActiveVideoElementChange")," event is providing access to the active video element. This is enabling video processing use cases such as canvas drawing, snapshoting and in similar occasions when the currently active video element is necessary. The event will be executed when the video element has been activated or changed. Find out more in our API events' section: ",(0,o.yg)("a",{parentName:"p",href:"./nanoplayer_api#onactivevideoelementchange"},(0,o.yg)("inlineCode",{parentName:"a"},"onActiveVideoElementChange")),"."),(0,o.yg)("admonition",{title:"Important",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Video elements should be treated as read-only and not be altered via properties or method calls.")),(0,o.yg)("p",null,"For functional reasons, on iOS there are 2 video elements. As the event will be fired always on switch/creation etc, there would be an indication which video element is currently displayed."),(0,o.yg)("p",null,"In case of iOS stream switching, please read more about the ",(0,o.yg)("a",{parentName:"p",href:"./nanoplayer_feature_stream_switching/"},"stream switch feature"),"."),(0,o.yg)("admonition",{title:"Canvas drawing might not be supported in all browsers",type:"caution"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"Canvas drawing with Media Source Extensions is not supported in Safari macOS and iPadOS desktop mode (by August 2022)"),(0,o.yg)("li",{parentName:"ul"},"Experimental support behind the feature flag ",(0,o.yg)("inlineCode",{parentName:"li"},"Experimental MediaSource Inline Painting")," has been added in Safari 15.4"))),(0,o.yg)("h2",{id:"how-to-use-onactivevideoelementchange-to-take-a-snapshot"},"How to use ",(0,o.yg)("inlineCode",{parentName:"h2"},"onActiveVideoElementChange")," to take a snapshot"),(0,o.yg)("p",null,"To draw/render image on the canvas or save a snapshot from the video, it is necessary to properly setup the player configuration, declare necessary variables and add functions which will get and then display the image."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"In the html page, add the player and shapshot holder and load the player script.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html",metastring:"showLineNumbers",showLineNumbers:!0},'<div>\n    <label>Playback</label>\n    \x3c!-- the container element for the player --\x3e\n    <div id="playerDiv" style="width: 100%;padding-top: 56.25%;"></div>\n    <label>Snapshot</label>\n    \x3c!-- the image element for the snapshot --\x3e\n    <img id="image"/>\n</div>\n<script type="text/javascript" src="nanoplayer.4.min.js"><\/script>\n')),(0,o.yg)("ol",{start:2},(0,o.yg)("li",{parentName:"ol"},"Setup the player configuration and declare necessary variables to enable the active video element feature. Due to cross-origin policies for video elements, it is required to set ",(0,o.yg)("inlineCode",{parentName:"li"},"'crossOrigin'")," to ",(0,o.yg)("inlineCode",{parentName:"li"},"'anonymous'")," to be able to take a snapshot.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-html",metastring:"showLineNumbers",showLineNumbers:!0},"<script type=\"text/javascript\">\n    var playerConfig = { // the basic configuration of the player\n        'playback': {\n            'autoplay'    : true,\n            'automute'    : true,\n            'muted'       : false,\n            'crossOrigin' :'anonymous'\n        },\n        'events': {},\n        'source': {\n            'defaults': {\n                'service': 'bintu'\n            },\n            'entries': [\n                {\n                    'index': 0,\n                    'label': 'stream 1',\n                    'h5live': {\n                        'rtmp': {\n                            'streamname': 'xxxx-xxxx' // your streamname\n                        }\n                    }\n                }\n            ]\n        },\n        'style': {\n            'width'                : 'auto',\n            'height'               : 'auto'\n        }\n    };\n    var player, activeVideoElement, canvasElement, canvasContext, imgElement, snapshot; // defining the necessary variables\n<\/script>\n")),(0,o.yg)("ol",{start:3},(0,o.yg)("li",{parentName:"ol"},"Add functions that handle drawing the video on a canvas and convert it to an image.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript",metastring:"showLineNumbers",showLineNumbers:!0},"<script type=\"text/javascript\">\n    function drawImageOnCanvas () { // paint the current video frame on a canvas\n        if (activeVideoElement) {\n            var w, h;\n            w = activeVideoElement.clientWidth;\n            h = activeVideoElement.clientHeight;\n            canvasElement.width = w;\n            canvasElement.height = h;\n            canvasContext.drawImage(activeVideoElement, 0, 0, w, h);\n        }\n    }\n    function getImageFromCanvas () { // get a jpeg encoded image as dataURL string from the canvas\n        return canvasElement.toDataURL('image/jpeg', 1);\n    }\n    function showSnapshot (dataURL) { // set the dataURL string as image source\n        imgElement.src = dataURL;\n    }\n    function takeSnapshot (){ // take the snapshot by drawing the video on a canvas, getting the image and display it in a img element\n        drawImageOnCanvas();\n        snapshot = getImageFromCanvas();\n        showSnapshot(snapshot);\n    }\n<\/script>\n")),(0,o.yg)("ol",{start:4},(0,o.yg)("li",{parentName:"ol"},"Create event handlers that connect the player to the snapshot functionality. It is essential to get the active video element reference and invalidate it on destroy. For demonstrative purposes snapshots are taken on play, on pause and when the active video element is changing.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript",metastring:"showLineNumbers",showLineNumbers:!0},'<script type="text/javascript">\n    function onActiveVideoElementChange (event) { // fires if a video element for playback will be activated or changed\n        activeVideoElement = event.data.activeVideoElement; // store a reference to the active video element to be able to access it\n        takeSnapshot();\n    }\n    function onPlay (event) { // fires if the playback has been started\n        takeSnapshot();\n    }\n    function onPause (event) { // fires if the playback has been stopped\n        takeSnapshot();\n    }\n    function onDestroy (event) { // fires if the player will be destroyed\n        activeVideoElement = null; // remove the reference to the element, the element should not be accessed after destroy\n    }\n<\/script>\n')),(0,o.yg)("ol",{start:5},(0,o.yg)("li",{parentName:"ol"},"Prepare DOM elements and setup the player.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript",metastring:"showLineNumbers",showLineNumbers:!0},"<script type=\"text/javascript\">\n    function prepareElements () { // load necessary DOM elements into variables\n        canvasElement = document.createElement('canvas');\n        canvasContext = canvasElement.getContext('2d');\n        imgElement = document.querySelector('img');\n    }\n    function preparePlayerConfig () { // add additional needed parameters to the player configuration\n        playerConfig.playback.crossOrigin = 'anonymous';\n        playerConfig.events.onActiveVideoElementChange = onActiveVideoElementChange;\n        playerConfig.events.onPlay = onPlay;\n        playerConfig.events.onPause = onPause;\n        playerConfig.events.onDestroy = onDestroy;\n    }\n    function initPlayer () { // instanciate and setup the player\n        player = new NanoPlayer('playerDiv');\n        player.setup(playerConfig).then(function (_config) {\n            console.log('setup ok with playerConfig: ' + JSON.stringify(_config));\n        }, function (error) {\n            console.log(error);\n        });\n    }\n    document.addEventListener('DOMContentLoaded', function () {\n        prepareElements();\n        preparePlayerConfig();\n        initPlayer();\n    });\n<\/script>\n")))}m.isMDXComponent=!0}}]);